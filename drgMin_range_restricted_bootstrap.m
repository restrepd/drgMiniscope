% Example data: Replace these with your actual data
function [p_value, ii_attempted_boots, no_boots] = drgMin_range_restricted_bootstrap(actual_hits,predicted_hits,...
    actual_misses,predicted_misses,provide_feedback)
%This method preforms range-matched bootstrap subsampling of the highvar
%The highvar should have a larger variance than the misses
%The code was generated by perplexity

% % Predicted and actual odor concentrations for highvar and misses
% predicted_highvar = randn(100, 1); % Replace with your data
% actual_highvar = randn(100, 1);    % Replace with your data
% predicted_misses = randn(50, 1); % Replace with your data
% actual_misses = randn(50, 1);    % Replace with your data

%Sort out which has lower variance
if var(actual_misses)<var(actual_hits)
    actual_highvar=actual_hits;
    predicted_highvar=predicted_hits;
    actual_lowvar=actual_misses;
    predicted_lowvar=predicted_misses;
else
    actual_lowvar=actual_hits;
    predicted_lowvar=predicted_hits;
    actual_highvar=actual_misses;
    predicted_highvar=predicted_misses;
end

% Parameters
max_bootstrap_attempts=10000;
num_bootstrap = 1000;   % Number of bootstrap iterations
variance_tolerance = 0.05; % Variance matching threshold (5%)

% Calculate variance for misses (target variance to match)
lowvar_variance = var(actual_lowvar);
highvar_variance = var(actual_highvar);

% Initialize array to store bootstrapped Pearson correlations for highvar
bootstrapped_correlations = [];

% Bootstrap loop
ii_attempted_boots=0;
boot_done=0;
while boot_done==0
    ii_attempted_boots=ii_attempted_boots+1;
    % Step 1: Bootstrap sample from highvar
    num_samples_highvar = length(actual_highvar);
    bootstrap_indices = randi(num_samples_highvar, num_samples_highvar, 1);
    bootstrap_predicted_highvar = predicted_highvar(bootstrap_indices);
    bootstrap_actual_highvar = actual_highvar(bootstrap_indices);
    
    % Step 2: Calculate variance of the bootstrap sample
    bootstrap_variance = var(bootstrap_actual_highvar);
    
    % Step 3: Check if the bootstrap sample variance matches the lowvar variance (within tolerance)
    if abs(bootstrap_variance - lowvar_variance) / lowvar_variance <= variance_tolerance
        % Step 4: Compute Pearson correlation for this bootstrap sample
        R = corrcoef(bootstrap_actual_highvar, bootstrap_predicted_highvar);
        bootstrapped_correlations(end+1) = R(1, 2); % Store correlation coefficient
    end
    if ii_attempted_boots>=max_bootstrap_attempts
        boot_done=1;
    end
    if length(bootstrapped_correlations)>=num_bootstrap
        boot_done=1;
    end

end

% Calculate Pearson correlation for lowvares (single value)
R_lowvar = corrcoef(actual_lowvar, predicted_lowvar);
R_lowvar_value = R_lowvar(1, 2);

% Optional: p-value calculation (proportion of bootstrapped correlations less than or greater than miss correlation)
p_value = mean(bootstrapped_correlations >= R_lowvar_value);

no_boots=length(bootstrapped_correlations);

if provide_feedback==1
    % Analyze results
    fprintf('Number of bootstrap samples: %d\n', ii_attempted_boots);
    fprintf('Number of valid bootstrap samples: %d\n', length(bootstrapped_correlations));
    fprintf('Miss correlation: %.4f\n', R_lowvar_value);

    % Plot distribution of bootstrapped correlations and compare to misses
    figure;
    histogram(bootstrapped_correlations, 'Normalization', 'pdf', 'FaceColor', [0.2, 0.6, 0.8]);
    hold on;
    xline(R_lowvar_value, 'r', 'LineWidth', 2);
    xlabel('Pearson Correlation');
    ylabel('Density');
    title('Bootstrapped Correlation Distribution (highvar) vs lowvar Correlation');
    legend('Bootstrapped highvar Correlations', 'Lowvar Correlation');
    hold off;


    fprintf('P-value (lowvar correlation >= bootstrapped highvar correlations): %.4f\n', p_value);
end
